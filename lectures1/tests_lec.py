'''================================Pytest==================================='''
'''TEST- это проверка вашего кода, тесты бывают ручного типа и автотесты'''
'''pytest - это библиотека, для тестирования кода'''

'''===========================запуск тестов==================================='''
#pytest - запуск тестов с тьекущей директории и всех дочерних
#pytest test_name.py - запуск определённого теста
#pytest test_name.py::test_1 - запуск определённого тест-функйии в определённом файле

'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'
'''Название всех файлов с тестами должно начинаться на test_название.py, либо название_test.py'''
'''Название тест-функций должно начинаться с test_названое'''
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
# def oper(a, b):
#     return a / b

# '===============================1вариант=============================='
# # так писать плохо
# import pytest
# @pytest.mark.skip(reason='не завершен')
# def test_oper_1():
#     assert oper(10, 5) == 2
#     assert oper(20, 5) == 2
#     assert oper(10, 2) == 2
#     assert oper(0, 1) == 2
# '=============================2 вариант==============================='
# # так писать плохо
# def test_oper_1():
#     assert oper(10, 5) == 2

# def test_oper1():
#     assert oper_25(20, 5) == 2

# def test_oper_3():
#     assert oper(10, 2) == 2

# def test_oper_4():
#     assert oper(0, 1) == 2

'============================3вариант========================='
# # отличный вариант
# import pytest 

# @pytest.mark.parametrize('num1, num2, result',[(10, 5, 2), (20, 5, 4), (10, 2, 5), (0, 1, 0)])
# def test_oper_5(num1, num2, result):
#     assert oper(num1, num2) == result

'==========================обработка исключений ============================'
# #плохой способ
# def test_oper_zero():
#     with pytest.raises(ZeroDivisionError):
#       oper(1, 0) == 1

# def test_oper_str():
#     with pytest.raises(TypeError):
#         oper(10, 'str') == 12

# # хороший способ
# @pytest.mark.parametrize('a, b, error', [(10, 'str', TypeError), (10, 0, ZeroDivisionError)])
# def test_oper_error(a, b, error):
#     with pytest.raises(error):
#         oper(a, b)
